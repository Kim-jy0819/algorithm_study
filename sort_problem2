'''
문제 설명
한자리 숫자가 적힌 종이 조각이 흩어져있습니다. 흩어진 종이 조각을 붙여 소수를 몇 개 만들 수 있는지 알아내려 합니다.

각 종이 조각에 적힌 숫자가 적힌 문자열 numbers가 주어졌을 때, 종이 조각으로 만들 수 있는 소수가 몇 개인지 return 하도록 solution 함수를 완성해주세요.

제한사항
numbers는 길이 1 이상 7 이하인 문자열입니다.
numbers는 0~9까지 숫자만으로 이루어져 있습니다.
"013"은 0, 1, 3 숫자가 적힌 종이 조각이 흩어져있다는 의미입니다.
입출력 예
numbers	return
"17"	3
"011"	2
입출력 예 설명
예제 #1
[1, 7]으로는 소수 [7, 17, 71]를 만들 수 있습니다.

예제 #2
[0, 1, 1]으로는 소수 [11, 101]를 만들 수 있습니다.

11과 011은 같은 숫자로 취급합니다.
'''


from itertools import permutations

def check_number(num):
    for i in range(2,int(num/2)+1):
        if num%i ==0 :
            return False
    if num==1 or num==0:
        return False
    return True


def solution(numbers):
    answer = 0
    se =[]
# 숫자 분리
    number=list(map(lambda x:x, numbers))
# 모든 경우의 수
    for i in range(1,len(number)+1):
        for j in (map(int,map(''.join, permutations(number,i)))):
            se.append(j)
# 중복 제거
    se=list(set(se))
# 소수 찾기
    for i in se:
        if check_number(i):
            answer+=1

    return answer
    
다른 사람의 풀이


from itertools import permutations
def solution(n):
    a = set()
# 반복문 합집합 연산자로 하나만 썼음.
    for i in range(len(n)):
        a |= set(map(int, map("".join, permutations(list(n), i + 1))))
# 0,1 제거
    a -= set(range(0, 2))
# 에라토스테네스의 체를 통해 연산량을 최대한 줄임.
    for i in range(2, int(max(a) ** 0.5) + 1):
        a -= set(range(i * 2, max(a) + 1, i))
    return len(a)
 
